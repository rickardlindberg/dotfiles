#!/usr/bin/env python
# encoding: utf-8


import datetime
import json
import re
import subprocess
import sys
import time


ICON_SEPARATOR = 6
PART_SEPARATOR = 12
TEXT_COLOR = "#cccccc"
GREEN = "#A7EF21"
YELLOW = "#FFFF00"
RED = "#FF0000"
BLUE = "#3BA6FE"
ORANGE = "#EFAB18"


class StatusLine(object):

    def loop(self):
        sys.stdout.write("{\"version\":1}")
        sys.stdout.write("[")
        while True:
            sys.stdout.write(self.build_json())
            sys.stdout.write(",")
            sys.stdout.flush()
            time.sleep(10)

    def build_json(self):
        self._parts = []
        self.add_netwrok_interfaces()
        self.add_ac()
        self.add_batteries()
        self.add_date_time()
        return json.dumps(self._parts)

    def add_netwrok_interfaces(self):
        output = subprocess.check_output(["ip", "-o", "link", "show"], text=True)
        for device_line in output.strip().split("\n"):
            match = re.search(r"^.*?: (.*?):.*state UP\b", device_line)
            if match:
                self.add_network(match.group(1))

    def add_network(self, interface_name):
        self.add_icon_section("", GREEN, self.get_network_info(interface_name))

    def get_network_info(self, interface_name):
        return "%s (%s)" % (
            self.get_network_name(interface_name),
            self.get_network_ip(interface_name)
        )

    def get_network_name(self, interface_name):
        try:
            return subprocess.check_output(["iwgetid", "-r", interface_name], text=True).strip()
        except:
            return interface_name

    def get_network_ip(self, interface_name):
        try:
            output = subprocess.check_output(["ifconfig", interface_name], text=True).strip()
            match = re.search(r"\binet ([^ ]+)", output)
            if match:
                return match.group(1)
        except:
            pass
        return "?"

    def add_ac(self):
        output = subprocess.check_output(["acpi", "-a"], text=True)
        if "on-line" in output:
            self.add_icon("", ORANGE, has_text=False)

    def add_batteries(self):
        output = subprocess.check_output(["acpi", "-b"], text=True)
        for battery_line in output.strip().split("\n"):
            match = re.search(r"(\d+)%", battery_line)
            self.add_battery(int(match.group(1)))

    def add_battery(self, percent):
        if percent < 20:
            icon = ""
            color = RED
        elif percent < 40:
            icon = ""
            color = YELLOW
        elif percent < 60:
            icon = ""
            color = YELLOW
        elif percent < 80:
            icon = ""
            color = GREEN
        else:
            icon = ""
            color = GREEN
        self.add_icon_section(icon, color, "%d%%" % percent)

    def add_date_time(self):
        now = datetime.datetime.now()
        self.add_icon_section("", BLUE, now.strftime("%A W%V"))
        self.add_icon_section("", BLUE, now.strftime("%Y-%m-%d"))
        self.add_icon_section("", BLUE, now.strftime("%H:%M"), bold=True)

    def add_icon_section(self, icon, color, text, bold=False):
        self.add_icon(icon, color, has_text=True)
        self.add_part(text, bold)

    def add_icon(self, icon, color, has_text):
        if has_text:
            width = ICON_SEPARATOR
        else:
            width = PART_SEPARATOR
        self._parts.append({
            "full_text": icon,
            "color": color,
            "separator": False,
            "separator_block_width": width,
        })

    def add_part(self, text, bold):
        if bold:
            self._parts.append({
                "full_text": "<b>%s</b>" % text,
                "color": TEXT_COLOR,
                "markup": "pango",
                "separator": False,
                "separator_block_width": PART_SEPARATOR,
            })
        else:
            self._parts.append({
                "full_text": text,
                "color": TEXT_COLOR,
                "separator": False,
                "separator_block_width": PART_SEPARATOR,
            })


if __name__ == "__main__":
    StatusLine().loop()
